import time, os, asyncio,sys

os.system("cls" if os.name == "nt" else "clear")
print(time.ctime(), "START!")

from telethon import TelegramClient, events
from telethon.tl.types import MessageEntityTextUrl, MessageEntityUrl
from utils import parse_url

# Use your own values from my.telegram.org
api_id = 20340026
api_hash = "d1c2010562443ded33c1f4fa64f16bc4"
client = TelegramClient("anon", api_id, api_hash)
# affiliate_id='dualwarez-21' # add to utils.py file

# channels id that we want to recieve msgs from
channels_id = [1315464303, 1491489500, 810184328, 1714047949]
# our channel id where we want to forward msg
our_channel_id = -980741307


# client.start()

# listen for new message
@client.on(events.NewMessage(chats=channels_id, incoming=True, forwards=False))
async def new_message_handler(event):
    try:
        print(time.ctime(), "info:", "RECEIVED NEW MESSAGE...")

        is_amazon_link = False

        for entity in event.message.entities:
            url = False

            if isinstance(entity, MessageEntityUrl):
                url = event.message.raw_text[
                    entity.offset : entity.offset + entity.length
                ]
            if isinstance(entity, MessageEntityTextUrl):
                url = entity.url

            if url:
                # generate new affiliate url using tiny url api
                url_info = await parse_url(url)
                is_amazon_link = url_info["is_amazon_link"]
                # replace url if it's a amazon link
                if is_amazon_link:
                    new_message = event.message.text.replace(url, url_info["updated"])
                    event.message.text = new_message

        if is_amazon_link:
            print(time.ctime(), "info:", "SENDING MESSAGE...")
            await client.send_message(our_channel_id, event.message)
            print(time.ctime(), "info:", "MESSAGE SEND!")
        else:
            print(time.ctime(), "warn:", "NOT AN AMAZON LINK!")

    except Exception as error:
        print(time.ctime(), "error:")
        print("error:\n", error)
        print("event:\n", event)
        print("message:\n", event.message)
        pass

async def main():
    while True:
        await client.start()
        print(time.ctime(), "CONNECTED!")

        await asyncio.sleep(10.0)
    
        await client.disconnect()
    
        if client.disconnected:
            print(time.ctime(), "DISCONNECTED!")
            await asyncio.sleep(3.0)
            # sys.exit(1)

asyncio.run(main())